#!/usr/bin/env python3

import pandas as pd
import argparse
import sys

parser = argparse.ArgumentParser(description='Prepare a quantification subset')
parser.add_argument('--input', default=sys.stdin)
parser.add_argument('--output', default=sys.stdout)
parser.add_argument('--eta', type=float, default=10, help='miRNA:mRNA ratio')
parser.add_argument('--num-targets', type=int, help='Number of targets to pick')
parser.add_argument('--num-mirnas', type=int, help='Number of microRNAs to pick')
parser.add_argument('--random-state', type=int, help='Random state for reproducible experiments')

args = parser.parse_args()

quantities = pd.read_csv(args.input, sep='\t', index_col=0)

mirnas = quantities.index.str.startswith('MIMAT') | quantities.index.str.startswith('SYNTH')

# adjust miR/mRNA ratio
quantities.loc[mirnas, 'quantity'] *= args.eta * quantities[~mirnas].quantity.sum() / quantities[mirnas].quantity.sum()

# perform a weighted sampling without replacement
m = quantities[mirnas].sample(args.num_mirnas, weights='quantity', random_state=args.random_state)
t = quantities[~mirnas].sample(args.num_targets, weights='quantity', random_state=args.random_state)

# adjust effective cross-concentration
actual_mq = m.sum() / quantities[mirnas].sum()
actual_tq = t.sum() / quantities[~mirnas].sum()

t *= actual_mq
m *= actual_tq

pd.concat([t, m]).to_csv(args.output, sep='\t')
